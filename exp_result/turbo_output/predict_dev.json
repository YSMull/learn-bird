{
    "0": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the relevant table and columns**: The question is asking for the highest eligible free rate for K-12 students in Alameda County. The relevant table is `frpm`, and the columns of interest are `County Name` and `Percent (%) Eligible Free (K-12)`.\n\n2. **Filter the data**: We need to filter the records where `County Name` is 'Alameda County'.\n\n3. **Calculate the eligible free rate**: The eligible free rate for K-12 students is given directly in the column `Percent (%) Eligible Free (K-12)`.\n\n4. **Find the maximum value**: We need to find the maximum value of `Percent (%) Eligible Free (K-12)` for Alameda County.\n\n5. **Construct the query**: We will use a `SELECT` statement with an aggregate function to find the maximum value.\n\nHere is the step-by-step SQL query:\n\n```sql\nSELECT \n    MAX(`Percent (%) Eligible Free (K-12)`) AS max_eligible_free_rate\nFROM \n    frpm\nWHERE \n    `County Name` = 'Alameda County';\n```\n\n### Explanation:\n- **SELECT MAX(`Percent (%) Eligible Free (K-12)`) AS max_eligible_free_rate**: This part of the query selects the maximum value from the `Percent (%) Eligible Free (K-12)` column and labels it as `max_eligible_free_rate`.\n- **FROM frpm**: This specifies the table from which to retrieve the data.\n- **WHERE `County Name` = 'Alameda County'**: This filters the records to only include those where the `County Name` is 'Alameda County'.\n\nThis query will return the highest eligible free rate for K-12 students in Alameda County.\t----- bird -----\tcalifornia_schools",
    "1": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the relevant tables and columns**: The question is about finding the lowest three eligible free rates for students aged 5-17 in continuation schools. The relevant table is `frpm` which contains the columns `Free Meal Count (Ages 5-17)` and `Enrollment (Ages 5-17)`. We also need to filter by the school type, which is stored in the `schools` table.\n\n2. **Calculate the eligible free rate**: The eligible free rate for students aged 5-17 is calculated as `Free Meal Count (Ages 5-17) / Enrollment (Ages 5-17)`.\n\n3. **Filter by school type**: We need to filter the schools where `School Type` is 'Continuation School'.\n\n4. **Order and limit the results**: We need to order the calculated rates in ascending order and select the top three.\n\nHere is the step-by-step SQL query:\n\n```sql\nWITH EligibleFreeRateCTE AS (\n    SELECT \n        f.CDSCode,\n        (f.\"Free Meal Count (Ages 5-17)\" / f.\"Enrollment (Ages 5-17)\") AS eligible_free_rate\n    FROM \n        frpm f\n    INNER JOIN \n        schools s ON f.CDSCode = s.CDSCode\n    WHERE \n        s.\"School Type\" = 'Continuation School'\n)\nSELECT \n    CDSCode,\n    eligible_free_rate\nFROM \n    EligibleFreeRateCTE\nORDER BY \n    eligible_free_rate ASC\nLIMIT 3;\n```\n\n### Explanation:\n1. **Common Table Expression (CTE)**: The `EligibleFreeRateCTE` CTE calculates the eligible free rate for students aged 5-17 by dividing `Free Meal Count (Ages 5-17)` by `Enrollment (Ages 5-17)`.\n2. **Join**: The query joins the `frpm` table with the `schools` table on the `CDSCode` to filter by school type.\n3. **Filter**: The query filters for schools where the `School Type` is 'Continuation School'.\n4. **Order and Limit**: The results are ordered by the calculated eligible free rate in ascending order, and the top three rows are selected.\n\nThis query provides a clear and concise solution to the problem without unnecessary complexity.\t----- bird -----\tcalifornia_schools",
    "2": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the required information**: The question asks for the zip codes of all charter schools in Fresno County Office of Education.\n2. **Determine the relevant tables**: The `schools` table contains zip codes and charter school information, while the `frpm` table has details about the county and district.\n3. **Join conditions**: We need to join the `schools` table with the `frpm` table using the `CDSCode`.\n4. **Filter conditions**: We need to filter for charter schools (`Charter School (Y/N)` = 1) and those in the Fresno County Office of Education (`County Name` = 'Fresno County' and `District Name` = 'Fresno County Office of Education').\n\nHere is the step-by-step SQL query:\n\n1. **Select the zip code from the `schools` table**.\n2. **Join the `schools` and `frpm` tables on `CDSCode`**.\n3. **Apply the filter conditions for charter schools and the specific county and district**.\n\nThe resulting SQL query is:\n\n```sql\nSELECT s.Zip\nFROM schools s\nINNER JOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.`County Name` = 'Fresno County'\n  AND f.`District Name` = 'Fresno County Office of Education'\n  AND s.Charter = 1;\n```\n\nThis query will return the zip codes of all charter schools in Fresno County Office of Education.\t----- bird -----\tcalifornia_schools",
    "3": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. Identify the school with the highest FRPM count for K-12 students.\n2. Retrieve the unabbreviated mailing street address of that school.\n\n### Step-by-Step Solution\n\n1. **Identify the School with the Highest FRPM Count for K-12 Students:**\n   - We need to find the school with the highest `FRPM Count (K-12)` from the `frpm` table.\n   - We can use a subquery to find the maximum value of `FRPM Count (K-12)`.\n\n2. **Retrieve the Mailing Street Address:**\n   - Once we have identified the school, we can join this information with the `schools` table to get the mailing street address.\n\n### SQL Query\n\n```sql\nSELECT T1.MailStreet\nFROM schools AS T1\nINNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T2.`FRPM Count (K-12)` = (\n  SELECT MAX(`FRPM Count (K-12)`)\n  FROM frpm\n);\n```\n\n### Explanation\n\n- **Subquery:** The subquery `SELECT MAX(`FRPM Count (K-12)`) FROM frpm` finds the maximum `FRPM Count (K-12)` value in the `frpm` table.\n- **Main Query:** The main query joins the `schools` and `frpm` tables on the `CDSCode` field. It then filters the rows where the `FRPM Count (K-12)` matches the maximum value found by the subquery.\n- **Result:** The query returns the `MailStreet` of the school with the highest `FRPM Count (K-12)`.\n\nThis query is efficient and directly addresses the question without unnecessary complexity.\t----- bird -----\tcalifornia_schools",
    "4": "To translate the given natural language question into an executable SQLite query, we need to break down the requirements and identify the relevant tables and columns. Here's a step-by-step reasoning process:\n\n1. **Identify the Relevant Tables**:\n   - The question asks for information about schools, specifically their phone numbers. This data is found in the `schools` table.\n   - The question also specifies conditions related to charter schools and their funding type, which are found in the `frpm` table.\n\n2. **Determine the Conditions**:\n   - The schools must be charter-funded, indicated by `Charter School (Y/N) = 1` in the `frpm` table.\n   - The schools must be directly funded, indicated by `Charter Funding Type = 'Direct'` in the `frpm` table.\n   - The schools must have been opened after January 1, 2000. This condition is checked using the `OpenDate` column in the `schools` table.\n\n3. **Formulate the SQL Query**:\n   - We need to join the `schools` table with the `frpm` table on the `CDSCode` column, which is common to both tables.\n   - We will use an `INNER JOIN` to ensure that we only get records where there is a match in both tables.\n   - We will apply the conditions specified in the question using the `WHERE` clause.\n\n4. **Construct the Query**:\n   - Select the `Phone` column from the `schools` table.\n   - Join the `schools` table (`T1`) with the `frpm` table (`T2`) on their common column, `CDSCode`.\n   - Apply the conditions: `Charter School (Y/N) = 1`, `Charter Funding Type = 'Direct'`, and `OpenDate > '2000-01-01'`.\n\nHere is the final SQL query:\n\n```sql\nSELECT T1.Phone\nFROM schools AS T1\nINNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode\nWHERE T2.`Charter School (Y/N)` = 1\nAND T2.`Charter Funding Type` = 'Direct'\nAND T1.OpenDate > '2000-01-01';\n```\n\nThis query effectively retrieves the phone numbers of direct charter-funded schools that were opened after January 1, 2000, by joining the relevant tables and applying the specified conditions.\t----- bird -----\tcalifornia_schools",
    "5": "To translate the given natural language question into an executable SQLite query, we need to break down the requirements and identify the relevant tables and columns. The question asks for the count of schools that are exclusively virtual (Virtual = 'F') and have an average SAT Math score greater than 400.\n\n### Step-by-Step Solution:\n\n1. **Identify the Relevant Tables and Columns:**\n   - The `schools` table contains information about whether a school is virtual (`Virtual` column).\n   - The `satscores` table contains the average SAT Math scores (`AvgScrMath` column).\n\n2. **Determine the Conditions:**\n   - The school must be exclusively virtual, which means `Virtual = 'F'`.\n   - The average SAT Math score must be greater than 400, which means `AvgScrMath > 400`.\n\n3. **Join the Tables:**\n   - We need to join the `schools` table with the `satscores` table on the common column `CDSCode` in `schools` and `cds` in `satscores`.\n\n4. **Count the Schools:**\n   - Use the `COUNT` function to count the number of schools that meet both conditions.\n\n### SQL Query Construction:\n\n- **SELECT Clause:** We need to count the number of schools, so we use `COUNT(s.CDSCode)`.\n- **FROM Clause:** We start from the `schools` table and join it with the `satscores` table.\n- **JOIN Clause:** We perform an inner join on `schools.CDSCode = satscores.cds`.\n- **WHERE Clause:** We apply the conditions `s.Virtual = 'F'` and `ss.AvgScrMath > 400`.\n\n### Final SQL Query:\n\n```sql\nSELECT COUNT(s.CDSCode) AS Total_Schools\nFROM schools s\nINNER JOIN satscores ss ON s.CDSCode = ss.cds\nWHERE s.Virtual = 'F' AND ss.AvgScrMath > 400;\n```\n\nThis query will return the count of schools that are exclusively virtual and have an average SAT Math score greater than 400.\t----- bird -----\tcalifornia_schools",
    "6": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the relevant tables and columns**:\n   - The `schools` table contains information about schools, including whether they are magnet schools (`Magnet = 1`).\n   - The `satscores` table contains information about SAT test takers, including the number of students who took the tests (`NumTstTakr`).\n\n2. **Determine the conditions**:\n   - We need to filter schools that have more than 500 SAT test takers (`NumTstTakr > 500`).\n   - We also need to filter schools that are magnet schools or offer a magnet program (`Magnet = 1`).\n\n3. **Join the tables**:\n   - We need to join the `schools` and `satscores` tables on the common column `CDSCode` (in `schools`) and `cds` (in `satscores`).\n\n4. **Select the required columns**:\n   - We need to select the school name (`School`) from the `schools` table.\n\n5. **Construct the query**:\n   - Use an INNER JOIN to combine the `schools` and `satscores` tables.\n   - Apply the conditions in the WHERE clause.\n\nHere is the final SQL query:\n\n```sql\nSELECT T1.School\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds\nWHERE T2.NumTstTakr > 500 AND T1.Magnet = 1;\n```\n\n### Explanation:\n- **SELECT T1.School**: We are selecting the school name from the `schools` table.\n- **FROM schools AS T1**: We are using an alias `T1` for the `schools` table.\n- **INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds**: We are joining the `schools` table with the `satscores` table on the common column `CDSCode`.\n- **WHERE T2.NumTstTakr > 500 AND T1.Magnet = 1**: We are applying the conditions to filter schools with more than 500 SAT test takers and that are magnet schools or offer a magnet program.\n\nThis query will return the names of schools that meet both criteria.\t----- bird -----\tcalifornia_schools",
    "7": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the Target Information**: The question asks for the phone number of a school.\n2. **Determine the Criteria**: We need to find the school with the highest number of test takers who scored over 1500 on SAT.\n3. **Join the Relevant Tables**: We need to join the `schools` table with the `satscores` table using the common column `CDSCode`.\n4. **Filter and Order**: We need to filter out schools with no test takers scoring over 1500 and then order the results by the number of such test takers in descending order.\n5. **Limit the Result**: Since we are interested in only the school with the highest number of test takers, we limit the result to one row.\n\nHere is the step-by-step SQL query:\n\n```sql\nSELECT T1.Phone\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds\nWHERE T2.NumGE1500 > 0\nORDER BY T2.NumGE1500 DESC\nLIMIT 1;\n```\n\n### Explanation:\n- **SELECT T1.Phone**: We select the `Phone` column from the `schools` table.\n- **FROM schools AS T1**: We specify the `schools` table as the primary table and alias it as `T1`.\n- **INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds**: We join the `satscores` table (aliased as `T2`) with the `schools` table on the common column `CDSCode`.\n- **WHERE T2.NumGE1500 > 0**: We filter the rows where the number of test takers scoring over 1500 is greater than zero.\n- **ORDER BY T2.NumGE1500 DESC**: We order the results by the number of test takers scoring over 1500 in descending order.\n- **LIMIT 1**: We limit the result to only one row, which will be the school with the highest number of test takers scoring over 1500.\n\nThis query directly addresses the question and ensures that we get the phone number of the school with the highest number of test takers scoring over 1500 on SAT.\t----- bird -----\tcalifornia_schools",
    "8": "To translate the given natural language question into an executable SQLite query, we need to break down the problem and identify the necessary steps:\n\n1. **Identify Schools with the Highest FRPM Count for K-12 Students**: We need to find the schools that have the highest `FRPM Count (K-12)` from the `frpm` table.\n2. **Retrieve SAT Test Takers for These Schools**: Once we have the schools with the highest FRPM count, we need to retrieve the number of SAT test takers (`NumTstTakr`) from the `satscores` table for these schools.\n\n### Step-by-Step Solution\n\n1. **Find Schools with the Highest FRPM Count for K-12 Students**:\n   - We will use a subquery to find the maximum `FRPM Count (K-12)` for each school.\n   - Then, we will filter the `frpm` table to get only those schools that have this maximum count.\n\n2. **Retrieve SAT Test Takers for These Schools**:\n   - We will join the filtered `frpm` table with the `satscores` table on the `CDSCode` to get the corresponding SAT test takers.\n\n### SQL Query\n\n```sql\nWITH MaxFRPM AS (\n    SELECT \n        CDSCode,\n        MAX(`FRPM Count (K-12)`) AS max_frpm\n    FROM \n        frpm\n    GROUP BY \n        CDSCode\n),\nTopFRPM AS (\n    SELECT \n        f.CDSCode,\n        s.NumTstTakr\n    FROM \n        frpm f\n    INNER JOIN \n        MaxFRPM m ON f.CDSCode = m.CDSCode AND `FRPM Count (K-12)` = m.max_frpm\n    INNER JOIN \n        satscores s ON f.CDSCode = s.cds\n)\nSELECT \n    CDSCode,\n    NumTstTakr\nFROM \n    TopFRPM;\n```\n\n### Explanation\n\n1. **MaxFRPM CTE**:\n   - This Common Table Expression (CTE) calculates the maximum `FRPM Count (K-12)` for each school (`CDSCode`).\n\n2. **TopFRPM CTE**:\n   - This CTE joins the `frpm` table with the `MaxFRPM` CTE to filter out only those rows where the `FRPM Count (K-12)` is equal to the maximum count for that school.\n   - It also joins with the `satscores` table to get the number of SAT test takers (`NumTstTakr`) for these schools.\n\n3. **Final SELECT**:\n   - The final query selects the `CDSCode` and `NumTstTakr` from the `TopFRPM` CTE, which gives us the number of SAT test takers for the schools with the highest FRPM count for K-12 students.\n\nThis query ensures that we are only considering schools with the highest FRPM count and retrieving the corresponding SAT test takers, aligning with the natural language question.\t----- bird -----\tcalifornia_schools",
    "9": "To translate the given natural language question into an executable SQLite query, we need to break down the requirements and identify the relevant tables and columns. The question asks for the count of schools that are directly charter-funded and have an average SAT Math score over 560.\n\n### Step-by-Step Solution:\n\n1. **Identify the Relevant Tables and Columns:**\n   - The `schools` table contains information about schools, including whether they are charter-funded (`Charter`) and their funding type (`FundingType`).\n   - The `satscores` table contains SAT scores, including the average math score (`AvgScrMath`) and the type of test taken (`rtype`).\n\n2. **Determine the Conditions:**\n   - We need to filter schools where `rtype` is 'sat' (indicating SAT test scores).\n   - We need to filter schools where `AvgScrMath` is greater than 560.\n   - We need to filter schools where `Charter` is 1 (indicating the school is a charter school).\n   - We need to filter schools where `FundingType` is 'direct' (indicating the school is directly charter-funded).\n\n3. **Join the Tables:**\n   - We need to join the `schools` table with the `satscores` table on the `CDSCode` (in `schools`) and `cds` (in `satscores`) columns to link each school with its SAT scores.\n\n4. **Count the Schools:**\n   - We need to count the number of schools that meet all the specified conditions.\n\n### SQL Query:\n\n```sql\nSELECT COUNT(DISTINCT s.CDSCode) AS Charter_Schools_Count\nFROM schools s\nINNER JOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.rtype = 'sat'\n  AND ss.AvgScrMath > 560\n  AND s.Charter = 1\n  AND s.FundingType = 'direct';\n```\n\n### Explanation:\n\n- **INNER JOIN**: We use an inner join to combine rows from the `schools` and `satscores` tables where the `CDSCode` matches.\n- **WHERE Clause**: We filter the results to include only those rows where:\n  - `ss.rtype = 'sat'`: The test type is SAT.\n  - `ss.AvgScrMath > 560`: The average math score is greater than 560.\n  - `s.Charter = 1`: The school is a charter school.\n  - `s.FundingType = 'direct'`: The funding type is direct.\n- **COUNT(DISTINCT s.CDSCode)**: We count the distinct `CDSCode` values to ensure each school is counted only once, even if it has multiple SAT test scores.\n\nThis query will return the number of schools that are directly charter-funded and have an average SAT Math score over 560.\t----- bird -----\tcalifornia_schools",
    "10": "To translate the given natural language question into an executable SQLite query, we need to break down the problem and identify the necessary steps:\n\n1. **Identify the School with the Highest Average Reading Score**: We need to find the school that has the highest average reading score (`AvgScrRead`) from the `satscores` table.\n2. **Retrieve the FRPM Count for Students Aged 5-17**: Once we have identified the school, we need to retrieve its FRPM count for students aged 5-17 from the `frpm` table.\n\n### Step-by-Step Solution\n\n1. **Find the School with the Highest Average Reading Score**:\n   - We will use a subquery to find the school (`sname`) with the highest average reading score (`AvgScrRead`).\n\n2. **Retrieve the FRPM Count for Students Aged 5-17**:\n   - We will join the `frpm` table with the subquery to get the FRPM count for students aged 5-17.\n\n### SQL Query\n\n```sql\nWITH HighestAvgReadScore AS (\n    SELECT sname, MAX(AvgScrRead) as max_avg_read_score\n    FROM satscores\n    GROUP BY sname\n)\nSELECT T1.`FRPM Count (Ages 5-17)`\nFROM frpm AS T1\nINNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds\nWHERE T2.sname = (SELECT sname FROM HighestAvgReadScore)\nAND T1.`FRPM Count (Ages 5-17)` IS NOT NULL;\n```\n\n### Explanation\n\n1. **HighestAvgReadScore CTE**:\n   - This Common Table Expression (CTE) finds the school (`sname`) with the highest average reading score (`AvgScrRead`).\n\n2. **Main Query**:\n   - We join the `frpm` table with the `satscores` table on the `CDSCode`.\n   - We filter the results to only include the school with the highest average reading score.\n   - Finally, we select the `FRPM Count (Ages 5-17)` for that school.\n\nThis query ensures we correctly identify the school with the highest average reading score and retrieve its FRPM count for students aged 5-17.\t----- bird -----\tcalifornia_schools",
    "11": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the relevant tables and columns**: The question asks for school codes where the total enrollment is over 500. Total enrollment can be calculated as the sum of `Enrollment (K-12)` and `Enrollment (Ages 5-17)`. The relevant table is `frpm` which contains the enrollment data.\n\n2. **Formulate the query**: We need to select the `CDSCode` from the `frpm` table where the sum of `Enrollment (K-12)` and `Enrollment (Ages 5-17)` is greater than 500.\n\n3. **Write the SQL query**: The query should be straightforward, selecting `CDSCode` from `frpm` and applying the condition on the sum of enrollments.\n\nHere is the SQL query based on the above reasoning:\n\n```sql\nSELECT CDSCode\nFROM frpm\nWHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;\n```\n\nHowever, the column names `Enrollment (K-12)` and `Enrollment (Ages 5-17)` contain spaces, which are not valid in SQL identifiers. Therefore, we need to use backticks (`) around the column names.\n\nHere is the corrected SQL query:\n\n```sql\nSELECT CDSCode\nFROM frpm\nWHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500;\n```\n\nThis query will return the `CDSCode` of schools where the total enrollment (sum of `Enrollment (K-12)` and `Enrollment (Ages 5-17)`) is greater than 500.\t----- bird -----\tcalifornia_schools",
    "12": "To translate the given natural language question into an executable SQLite query, we need to follow these steps:\n\n1. **Identify the relevant tables and columns**:\n   - The `satscores` table contains information about SAT scores, including the number of students scoring 1500 or above (`NumGE1500`) and the total number of students who took the test (`NumTstTakr`).\n   - The `frpm` table contains information about the free and reduced-price meal (FRPM) eligibility rates for students aged 5-17 (`Free Meal Count (Ages 5-17)` and `Enrollment (Ages 5-17)`).\n\n2. **Calculate the SAT excellence rate**:\n   - The SAT excellence rate is calculated as `NumGE1500 / NumTstTakr`.\n\n3. **Filter schools with an SAT excellence rate over 0.3**:\n   - We need to filter the `satscores` table based on this condition.\n\n4. **Calculate the eligible free rate for students aged 5-17**:\n   - The eligible free rate is calculated as `Free Meal Count (Ages 5-17) / Enrollment (Ages 5-17)`.\n\n5. **Find the highest eligible free rate for students aged 5-17 among the filtered schools**:\n   - We need to join the `satscores` and `frpm` tables on the `CDSCode` column to get the required data for each school.\n\nHere is the step-by-step SQL query:\n\n```sql\nWITH SATExcellence AS (\n    SELECT \n        cds,\n        NumGE1500 / NumTstTakr AS ExcellenceRate\n    FROM \n        satscores\n),\nFilteredSchools AS (\n    SELECT \n        cds\n    FROM \n        SATExcellence\n    WHERE \n        ExcellenceRate > 0.3\n),\nFRPMData AS (\n    SELECT \n        CDSCode,\n        `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS EligibleFreeRate\n    FROM \n        frpm\n)\nSELECT \n    MAX(EligibleFreeRate) AS HighestEligibleFreeRate\nFROM \n    FRPMData\nWHERE \n    CDSCode IN (SELECT cds FROM FilteredSchools);\n```\n\n### Explanation:\n1. **SATExcellence CTE**:\n   - This common table expression (CTE) calculates the SAT excellence rate for each school.\n\n2. **FilteredSchools CTE**:\n   - This CTE filters the schools based on the condition that the SAT excellence rate is greater than 0.3.\n\n3. **FRPMData CTE**:\n   - This CTE calculates the eligible free rate for students aged 5-17 for each school.\n\n4. **Final SELECT**:\n   - The final query selects the maximum eligible free rate from the `FRPMData` CTE for schools that are in the `FilteredSchools` list.\n\nThis query ensures that we only consider schools with an SAT excellence rate over 0.3 and find the highest eligible free rate for students aged 5-17 among those schools.\t----- bird -----\tcalifornia_schools"
}