{
    "0": "To find the highest eligible free rate for K-12 students in schools in Alameda County, I'll need to:\n\n1. Join the `frpm` table with the `schools` table to ensure we're only looking at schools in Alameda County\n2. Calculate the eligible free rate using the formula: `Free Meal Count (K-12)` / `Enrollment (K-12)`\n3. Find the maximum value of this calculated rate\n4. Since the rate is already calculated in the table as `Percent (%) Eligible Free (K-12)`, we can simply find the maximum of that column\n\nHere's the SQL query:\n\n```sql\nSELECT MAX(`Percent (%) Eligible Free (K-12)`) AS highest_eligible_free_rate\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.County = 'Alameda';\n```\n\nThis query:\n- Joins the two tables on CDSCode\n- Filters for schools in Alameda County\n- Calculates the maximum value of the eligible free rate column\n- Returns it as \"highest_eligible_free_rate\"\n\nNote: While we could calculate the rate manually using the formula in the external knowledge, the table already includes this calculation in the `Percent (%) Eligible Free (K-12)` column, so it's more efficient to use that directly.\t----- bird -----\tcalifornia_schools",
    "1": "To find the lowest three eligible free rates for students aged 5-17 in continuation schools, I'll need to:\n\n1. Join the `frpm` table with the `schools` table to identify continuation schools\n2. Calculate the eligible free rate using the formula: `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`\n3. Filter for continuation schools (where `School Type` contains \"Continuation\")\n4. Order by the calculated rate in ascending order\n5. Limit to the top 3 results\n\nHere's the SQL query:\n\n```sql\nSELECT \n    frpm.`School Name`,\n    frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)` AS eligible_free_rate\nFROM \n    frpm\nJOIN \n    schools ON frpm.CDSCode = schools.CDSCode\nWHERE \n    frpm.`School Type` LIKE '%Continuation%'\n    AND frpm.`Enrollment (Ages 5-17)` > 0  -- Avoid division by zero\nORDER BY \n    eligible_free_rate ASC\nLIMIT 3;\n```\n\nNote: I added a condition `frpm.`Enrollment (Ages 5-17)` > 0` to prevent division by zero errors. The query will return the school names along with their calculated eligible free rates, ordered from lowest to highest.\t----- bird -----\tcalifornia_schools",
    "2": "To find the zip codes of all charter schools in Fresno County Office of Education, I'll need to:\n\n1. Identify charter schools by checking `Charter School (Y/N)` = 1 in the frpm table\n2. Filter for schools where the district is \"Fresno County Office of Education\"\n3. Join with the schools table to get the zip code information\n4. Select the distinct zip codes\n\nHere's the SQL query:\n\n```sql\nSELECT DISTINCT s.Zip\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\nAND s.District = 'Fresno County Office of Education'\nAND s.Zip IS NOT NULL;\n```\n\nThis query:\n- Joins the frpm table with schools table on CDSCode\n- Filters for charter schools (where Charter School (Y/N) = 1)\n- Filters for schools in Fresno County Office of Education\n- Returns only distinct, non-null zip codes\n- The DISTINCT ensures we don't get duplicate zip codes if multiple charter schools share the same zip code\t----- bird -----\tcalifornia_schools",
    "3": "To find the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students, I'll need to:\n\n1. Identify the school with the highest `FRPM Count (K-12)` from the `frpm` table\n2. Join this with the `schools` table to get the mailing street address\n3. Return only the unabbreviated mailing street address (`MailStreet`)\n\nHere's the SQL query:\n\n```sql\nSELECT s.MailStreet\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nORDER BY f.`FRPM Count (K-12)` DESC\nLIMIT 1;\n```\n\nThis query:\n- Joins the `frpm` and `schools` tables on the CDSCode\n- Orders the results by FRPM Count (K-12) in descending order to get the highest count first\n- Limits to just 1 result (the highest)\n- Returns only the MailStreet field which contains the unabbreviated mailing street address\n\nThe query will return the mailing street address of whichever school has the highest FRPM count for K-12 students in the dataset.\t----- bird -----\tcalifornia_schools",
    "4": "To find the phone numbers of direct charter-funded schools that are opened after January 1, 2000, I'll need to:\n\n1. Identify charter schools (where `Charter School (Y/N)` = 1 in frpm table)\n2. Check that they are direct-funded (where `Charter Funding Type` = 'Directly funded' in frpm table)\n3. Verify they are opened after 2000/1/1 (from the schools table)\n4. Get their phone numbers (from the schools table)\n\nHere's the SQL query:\n\n```sql\nSELECT s.Phone\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.`Charter School (Y/N)` = 1\n  AND f.`Charter Funding Type` = 'Directly funded'\n  AND s.OpenDate > '2000-01-01'\n  AND s.StatusType = 'Active';\n```\n\nNote: I've also added a condition to check that the school is currently active (`StatusType = 'Active'`) since we're looking for currently operating schools with phone numbers. The join between the schools and frpm tables connects the school information with the charter school status and funding type information.\t----- bird -----\tcalifornia_schools",
    "5": "To find the number of schools with an average SAT Math score greater than 400 that are exclusively virtual, I'll need to:\n\n1. Join the `satscores` table with the `schools` table on the CDSCode/cds field\n2. Filter for records where:\n   - `AvgScrMath` > 400\n   - `Virtual` = 'F' (exclusively virtual)\n   - `rtype` = 'S' (school-level records, not district-level)\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(*) AS virtual_schools_high_math\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.AvgScrMath > 400\n  AND sc.Virtual = 'F'\n  AND s.rtype = 'S';\n```\n\nThis query:\n- Joins the SAT scores with school information\n- Counts only schools (not districts) with math scores above 400\n- Further restricts to exclusively virtual schools (Virtual = 'F')\n- Returns the count of matching schools\t----- bird -----\tcalifornia_schools",
    "6": "To find schools with SAT test takers over 500 that are magnet schools or offer a magnet program, I'll need to:\n\n1. Join the `satscores` table with the `schools` table to get the magnet status\n2. Filter for schools where `NumTstTakr` > 500\n3. Filter for schools where `Magnet` = 1 (based on the external knowledge)\n4. Select the relevant school information\n\nHere's the SQL query:\n\n```sql\nSELECT s.CDSCode, s.School, s.District, s.County, \n       sat.NumTstTakr, sat.AvgScrRead, sat.AvgScrMath, sat.AvgScrWrite\nFROM schools s\nJOIN satscores sat ON s.CDSCode = sat.cds\nWHERE sat.NumTstTakr > 500\n  AND s.Magnet = 1\nORDER BY sat.NumTstTakr DESC;\n```\n\nThis query:\n- Joins the schools and SAT scores tables on the CDSCode/cds field\n- Filters for schools with more than 500 SAT test takers\n- Filters for magnet schools (Magnet = 1)\n- Returns the school information along with SAT statistics\n- Orders by the number of test takers in descending order\t----- bird -----\tcalifornia_schools",
    "7": "To find the phone number of the school with the highest number of test takers with an SAT score over 1500, I'll need to:\n\n1. Join the `satscores` table with the `schools` table to get the phone number\n2. Filter for schools (rtype = 'S') since we want individual schools, not districts\n3. Order by the number of test takers with scores over 1500 (NumGE1500) in descending order\n4. Limit to just the top result\n\nHere's the SQL query:\n\n```sql\nSELECT s.Phone, sc.sname, sc.NumTstTakr, sc.NumGE1500\nFROM satscores sc\nJOIN schools s ON sc.cds = s.CDSCode\nWHERE sc.rtype = 'S' AND sc.NumGE1500 IS NOT NULL\nORDER BY sc.NumGE1500 DESC\nLIMIT 1;\n```\n\nThis query:\n- Joins the SAT scores data with school contact information\n- Filters for only school-level records (not districts)\n- Excludes schools with no data on test takers over 1500\n- Orders by the count of high-scoring test takers (highest first)\n- Returns just the top result with the school's phone number\t----- bird -----\tcalifornia_schools",
    "8": "# SQL Query to Find Number of SAT Test Takers for Schools with Highest FRPM Count (K-12)\n\nTo solve this problem, I'll follow these steps:\n1. First, identify the schools with the highest FRPM count for K-12 students from the `frpm` table\n2. Then, join these schools with the `satscores` table to get their SAT test taker numbers\n3. Since there might be multiple schools with the same highest FRPM count, I'll use a subquery approach\n\nHere's the SQL query:\n\n```sql\nSELECT \n    f.`School Name`,\n    f.`FRPM Count (K-12)`,\n    s.NumTstTakr AS SAT_Test_Takers\nFROM \n    frpm f\nJOIN \n    satscores s ON f.CDSCode = s.cds\nWHERE \n    f.`FRPM Count (K-12)` = (\n        SELECT MAX(`FRPM Count (K-12)`) \n        FROM frpm\n    )\nORDER BY \n    f.`FRPM Count (K-12)` DESC;\n```\n\nThis query:\n- Joins the `frpm` and `satscores` tables on the CDSCode/cds field\n- Filters for only schools that have the maximum FRPM count (K-12)\n- Returns the school name, FRPM count, and number of SAT test takers\n- Orders results by FRPM count in descending order (though they'll all be the same max value)\n\nNote: If you want to include schools that might not have SAT scores data, you could use a LEFT JOIN instead of a regular JOIN.\t----- bird -----\tcalifornia_schools",
    "9": "Let me break this down step by step:\n\n1. First, I need to identify schools with average math scores over 560 from the `satscores` table\n2. Then I need to join this with the `schools` table to find which of these schools are charter schools\n3. Finally, I need to check if these charter schools are directly funded by looking at the `FundingType` column\n\nHere's the SQL query:\n\n```sql\nSELECT COUNT(*) AS directly_funded_charter_schools\nFROM satscores s\nJOIN schools sc ON s.cds = sc.CDSCode\nWHERE s.AvgScrMath > 560\n  AND sc.Charter = 1\n  AND sc.FundingType = 'Directly funded';\n```\n\nThis query:\n1. Joins the SAT scores with school information\n2. Filters for schools with math scores > 560\n3. Further filters for charter schools (Charter = 1)\n4. Finally checks that the funding type is \"Directly funded\"\n5. Counts how many schools meet all these criteria\t----- bird -----\tcalifornia_schools",
    "10": "To find the school with the highest average score in Reading in the SAT test and then determine its FRPM count for students aged 5-17, I'll need to:\n\n1. First identify the school with the highest AvgScrRead from the satscores table\n2. Then join that result with the frpm table to get the FRPM Count (Ages 5-17) for that school\n\nHere's the SQL query:\n\n```sql\nSELECT \n    s.sname AS school_name,\n    s.AvgScrRead AS highest_reading_score,\n    f.`FRPM Count (Ages 5-17)`\nFROM \n    satscores s\nJOIN \n    frpm f ON s.cds = f.CDSCode\nWHERE \n    s.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL)\nLIMIT 1;\n```\n\nThis query:\n1. Finds the maximum average reading score from satscores\n2. Joins with frpm table on CDSCode\n3. Returns the school name, its reading score, and the FRPM count for ages 5-17\n4. Limits to 1 result in case there are ties for the highest score\n\nNote: I'm using LIMIT 1 to handle potential ties where multiple schools might have the same highest reading score. If you want to see all schools with the highest score, you could remove the LIMIT clause.\t----- bird -----\tcalifornia_schools",
    "11": "To find the schools with a total enrollment of over 500, we need to calculate the total enrollment by summing `Enrollment (K-12)` and `Enrollment (Ages 5-17)` from the `frpm` table. Then we'll filter for schools where this sum is greater than 500.\n\nHere's the SQL query:\n\n```sql\nSELECT CDSCode\nFROM frpm\nWHERE (\"Enrollment (K-12)\" + \"Enrollment (Ages 5-17)\") > 500;\n```\n\nThis query:\n1. Selects the CDSCode (school code) from the frpm table\n2. Calculates the total enrollment by adding the two enrollment columns\n3. Filters to only include schools where the total enrollment is greater than 500\n\nNote that I'm using quotes around the column names because they contain spaces and special characters. The query will return all school codes that meet the enrollment criteria.\n\nFrom the sample data provided, the first school (CDSCode 01100170109835) has:\n- Enrollment (K-12) = 1087.0\n- Enrollment (Ages 5-17) = 1070.0\nTotal = 2157.0, which would be included in the results.\t----- bird -----\tcalifornia_schools",
    "12": "To solve this problem, we need to:\n1. Calculate the SAT excellence rate (NumGE1500 / NumTstTakr) for each school\n2. Filter schools with an excellence rate > 0.3\n3. From these schools, find the highest eligible free rate for students aged 5-17 (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`)\n4. Join the relevant tables to get the required information\n\nHere's the SQL query:\n\n```sql\nSELECT MAX(f.`Free Meal Count (Ages 5-17)` / f.`Enrollment (Ages 5-17)`) AS highest_eligible_free_rate\nFROM satscores s\nJOIN frpm f ON s.cds = f.CDSCode\nWHERE s.NumTstTakr > 0  -- Ensure we don't divide by zero\nAND (1.0 * s.NumGE1500 / s.NumTstTakr) > 0.3;\n```\n\nThis query:\n- Joins the satscores and frpm tables on the school identifier (cds/CDSCode)\n- Filters for schools where the excellence rate (NumGE1500/NumTstTakr) is greater than 0.3\n- Calculates the eligible free rate for each school and returns the maximum value\n- The 1.0 * multiplication ensures floating-point division in SQLite\n\nThe result will be the highest eligible free rate for students aged 5-17 among schools with an SAT excellence rate over 30%.\t----- bird -----\tcalifornia_schools"
}